(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{100:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),c=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=c(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=c(a),u=n,d=b["".concat(l,".").concat(u)]||b[u]||m[u]||o;return a?r.a.createElement(d,i(i({ref:t},p),{},{components:a})):r.a.createElement(d,i({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},65:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return c}));var n=a(3),r=a(7),o=(a(0),a(100)),l={},i={unversionedId:"gcp_filestore_migration",id:"gcp_filestore_migration",isDocsHomePage:!1,title:"gcp_filestore_migration",description:"Replace file storage with Google's Filestore volume.",source:"@site/docs/gcp_filestore_migration.md",slug:"/gcp_filestore_migration",permalink:"/silta/docs/gcp_filestore_migration",editUrl:"https://github.com/wunderio/silta/tree/master/docs/gcp_filestore_migration.md",version:"current"},s=[{value:"!! LIMITATIONS, PITFALLS",id:"-limitations-pitfalls",children:[]},{value:"Changing storage for an existing environment:",id:"changing-storage-for-an-existing-environment",children:[]},{value:"Changing storage for a new deployment, project:",id:"changing-storage-for-a-new-deployment-project",children:[]}],p={toc:s};function c(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"replace-file-storage-with-googles-filestore-volume"},"Replace file storage with Google's Filestore volume."),Object(o.b)("p",null,"This example will change storage for Drupal public files.\nRepeat the same steps for other volumes, such as private files. "),Object(o.b)("h3",{id:"-limitations-pitfalls"},"!! LIMITATIONS, PITFALLS"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Do not delete the old public-files section, nor change their names. Kubernetes tracks the volumes by these names."),Object(o.b)("li",{parentName:"ol"},"Do not change storage size after the first deployment. You will end up in an error state: Ignoring the PVC: didn't find a plugin capable of expanding the volume; waiting for an external controller to process this PVC."),Object(o.b)("li",{parentName:"ol"},"The provisioned storage limit is not enforced. The application can expand to use all the available storage regardless of the provisioned size.\nIf you run out of free space on volume, contact cluster administrator for its expansion."),Object(o.b)("li",{parentName:"ol"},"The provisioned storage is not guaranteed. You may allocate more than the NFS share's total size. The share may also not have enough storage space left to actually accommodate the request.")),Object(o.b)("h2",{id:"changing-storage-for-an-existing-environment"},"Changing storage for an existing environment:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Add a new location which uses the new storage. We will extend default values from ",Object(o.b)("a",{parentName:"p",href:"https://github.com/wunderio/charts/blob/039f29d9d507813d40a182fa2320adfd6a3db06a/drupal/values.yaml#L355"},"https://github.com/wunderio/charts/blob/039f29d9d507813d40a182fa2320adfd6a3db06a/drupal/values.yaml#L355")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"mounts:\n  public-files-filestore:\n    enabled: true\n    storage: 10G\n    mountPath: /app/web/sites/default/files-new\n    storageClassName: nfs-shared\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Deploy")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Find and exec into the shell deployment to get root access"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"kubectl --namespace=<namespace> get deployments | grep shell\nkubectl --namespace=<namespace> exec -it deployment/<shell deployment name> -- sh\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy public files from the old location to the new one"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"rsync --info=progress2 -az /app/web/sites/default/files/ /app/web/sites/default/files-new/\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Set ownership and permissions for the new location"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"chown -R www-data:www-data /app/web/sites/default/files-new\nchmod 770 /app/web/sites/default/files-new\nfind /app/web/sites/default/files-new -type d -exec chmod 770 '{}' \\;\nfind /app/web/sites/default/files-new -type f -exec chmod 660 '{}' \\;\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Update the mount path for the new mount, disable the old one"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"mounts:\n  public-files-filestore:\n    enabled: true\n    storage: 10G\n    mountPath: /app/web/sites/default/files\n    storageClassName: nfs-shared\n  public-files:\n    enabled: false\n    mountPath: /app/web/sites/default/files-old\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Add the original Drupal file paths as environment variables"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"php:\n  env:\n    PRIVATE_FILES_PATH: /app/private\n    PUBLIC_FILES_PATH: /app/web/sites/default/files\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"To run PHP as user ",Object(o.b)("inlineCode",{parentName:"p"},"www-data"),", add this line in your ",Object(o.b)("inlineCode",{parentName:"p"},"silta/php.Dockerfile")," right after the ",Object(o.b)("inlineCode",{parentName:"p"},"COPY")," line"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dockerfile"},"USER www-data\n")),Object(o.b)("p",{parentName:"li"},"Dockerfile example of a project"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dockerfile"},"FROM eu.gcr.io/silta-images/php:8.0-fpm-v0.1\n\nCOPY --chown=www-data:www-data . /app\n\nUSER www-data\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Deploy")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Check owners of the files directory, it should be www-data"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"ls -alh /app/web/sites/default/files\n")),Object(o.b)("p",{parentName:"li"},"If some of the files are owned by root - rerun step 5, but for the files path (not files-new)")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Check that the public files path shows up correctly when running ",Object(o.b)("inlineCode",{parentName:"p"},"drush status"),".\nIf it doesn't, make sure that it has not been overridden in settings.php file."))),Object(o.b)("h2",{id:"changing-storage-for-a-new-deployment-project"},"Changing storage for a new deployment, project:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Redefine the default public and private files volumes.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"mounts:\n  public-files:\n    enabled: true\n    storage: 10G\n    mountPath: /app/web/sites/default/files\n    storageClassName: nfs-shared\n  private-files:\n    enabled: true\n    storage: 1G\n    mountPath: /app/private\n    storageClassName: nfs-shared\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Deploy - this is your first deployment for the project or environment.")))}c.isMDXComponent=!0}}]);