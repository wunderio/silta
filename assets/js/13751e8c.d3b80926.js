"use strict";(self.webpackChunksilta_docs=self.webpackChunksilta_docs||[]).push([[70],{6164:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"vendor-uks","title":"Upcloud compatibility","description":"Silta is mostly Upcloud compatible, there are some requirements for environments deployed to UKS cluster.","source":"@site/docs/vendor-uks.md","sourceDirName":".","slug":"/vendor-uks","permalink":"/silta/docs/vendor-uks","draft":false,"unlisted":false,"editUrl":"https://github.com/wunderio/silta/tree/master/docs/vendor-uks.md","tags":[],"version":"current","frontMatter":{}}');var r=s(4848),i=s(8453);const o={},a="Upcloud compatibility",c={},l=[{value:"Cluster requirements",id:"cluster-requirements",level:2},{value:"Missing functionality",id:"missing-functionality",level:2},{value:"Deployment specifics",id:"deployment-specifics",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"upcloud-compatibility",children:"Upcloud compatibility"})}),"\n",(0,r.jsx)(n.p,{children:"Silta is mostly Upcloud compatible, there are some requirements for environments deployed to UKS cluster."}),"\n",(0,r.jsx)(n.h2,{id:"cluster-requirements",children:"Cluster requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Load balancers are configured using json in annotations, see ",(0,r.jsx)(n.a,{href:"https://github.com/UpCloudLtd/uks-instructions/blob/main/ccm/README.md#customising-load-balancer-configuration",children:"https://github.com/UpCloudLtd/uks-instructions/blob/main/ccm/README.md#customising-load-balancer-configuration"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"By default, they are in HTTP mode, which needs to be changed to TCP"}),"\n",(0,r.jsxs)(n.li,{children:["Example configuration for ingress-nginx:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'ingress-nginx:\n  controller:\n  admissionWebhooks:\n    enabled: true\n  autoscaling:\n    enabled: false\n  config:\n    use-forwarded-headers: "true"\n    compute-full-forwarded-for: "true"\n    use-proxy-protocol: "true"\n    real-ip-header: "proxy_protocol"\n  service:\n    type: LoadBalancer\n  annotations:\n  service.beta.kubernetes.io/upcloud-load-balancer-config: |\n    {\n      "name": "silta-ingress-1",\n      "plan": "production-small",\n      "frontends": [\n        {\n          "name": "https",\n          "mode": "tcp",\n          "port": 443\n        },\n        {\n          "name": "http",\n          "mode": "tcp",\n          "port": 80\n        }\n      ],\n      "backends": [\n      {\n        "name": "https",\n        "properties": { "outbound_proxy_protocol": "v1"}\n      },\n      {\n        "name": "http",\n        "properties": { "outbound_proxy_protocol": "v1"}\n      }\n    ]\n    }\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"To enable allowlist for VPN, SSH service has to annotated with:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'gitAuth:\n  annotations:\n        service.beta.kubernetes.io/upcloud-load-balancer-config: |\n          {\n            "name": "silta-ssh-1",\n            "plan": "development",\n            "frontends": [\n              {\n                "name": "ssh",\n                "mode": "tcp",\n                "port": 22,\n                "rules": [\n                  {\n                    "name": "allow-ip",\n                    "matching_condition": "or",\n                    "matchers": [\n                      {\n                        "type": "src_ip",\n                        "inverse": true,\n                        "match_src_ip": {\n                          "comment": "vpn-1",\n                          "value": "<VPN_IP_HERE>/32"\n                        }\n                      },\n                      {\n                        "type": "src_ip",\n                        "inverse": true,\n                        "match_src_ip": {\n                          "comment": "vpn-2",\n                          "value": "<VPN_2_IP_HERE>/32"\n                        }\n                      }\n                    ],\n                    "actions": [\n                      {\n                        "type": "tcp_reject",\n                        "action_tcp_reject": {}\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Creating an object storage and configuring rclone is quite well explained at ",(0,r.jsx)(n.a,{href:"https://upcloud.com/resources/tutorials/migrate-object-storage-rclone",children:"https://upcloud.com/resources/tutorials/migrate-object-storage-rclone"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example configuration:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'rclone:\n  params:\n    remote: s3\n    remotePath: silta-shared\n    s3-acl: private\n    s3-endpoint: xyz.fi-hel2.upcloudobjects.com\n    s3-provider: Other\n    s3-region: fi-hel2\n    s3-access-key-id: <ACCESS_KEY>\n    s3-secret-access-key: <SECRET_KEY>\n    s3-directory-markers: "true"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If using managed database, create a new database user and set authentication method to ",(0,r.jsx)(n.code,{children:"mysql_native_password"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Smallest size for UKS storage volumes is 1Gi - set this for mariadb, elasticsearch pods"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["There are few more requirements listed on ",(0,r.jsx)(n.a,{href:"https://github.com/wunderio/charts/tree/master/silta-cluster#requirements",children:"silta-cluster chart page"}),", those are common for all silta-cluster installations"]}),"\n",(0,r.jsx)(n.h2,{id:"missing-functionality",children:"Missing functionality"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Managed Docker image registry. Use ",(0,r.jsx)(n.a,{href:"https://goharbor.io/",children:"Harbor"})," as a replacement and the object storage as a storage backend."]}),"\n",(0,r.jsx)(n.li,{children:"Managed NFS storage"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"deployment-specifics",children:"Deployment specifics"}),"\n",(0,r.jsxs)(n.p,{children:["There is no extra configuration required for basic deployments. The only change would be ",(0,r.jsx)(n.code,{children:"cluster.type"})," but it's normally overridden in CI pipeline."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);