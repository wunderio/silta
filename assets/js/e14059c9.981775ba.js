"use strict";(self.webpackChunksilta_docs=self.webpackChunksilta_docs||[]).push([[875],{4680:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"encrypting-sensitive-configuration","title":"Encrypting sensitive configuration","description":"Certain information such as access tokens, secret keys, passwords, certificates etc. is considered as sensitive data thus should not be committed to the repository as plain text.","source":"@site/docs/encrypting_sensitive_configuration.md","sourceDirName":".","slug":"/encrypting-sensitive-configuration","permalink":"/silta/docs/encrypting-sensitive-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/wunderio/silta/tree/master/docs/encrypting_sensitive_configuration.md","tags":[],"version":"current","frontMatter":{"id":"encrypting-sensitive-configuration","title":"Encrypting sensitive configuration"},"sidebar":"someSidebar","previous":{"title":"Docker images","permalink":"/silta/docs/docker-images"},"next":{"title":"Go-live checklist","permalink":"/silta/docs/go-live-checklist"}}');var r=i(4848),s=i(8453);const c={id:"encrypting-sensitive-configuration",title:"Encrypting sensitive configuration"},l=void 0,o={},d=[{value:"Encryption &amp; decryption",id:"encryption--decryption",level:2},{value:"1. Get the encryption key",id:"1-get-the-encryption-key",level:3},{value:"2. Create and encrypt the file containing sensitive information",id:"2-create-and-encrypt-the-file-containing-sensitive-information",level:3},{value:"3. Add decryption to CircleCI configuration",id:"3-add-decryption-to-circleci-configuration",level:3},{value:"<code>decrypt_files</code> parameter",id:"decrypt_files-parameter",level:4},{value:"<code>codebase-build</code> or <code>pre-release</code> parameter with a <code>decrypt-files</code> command in it (recommended)",id:"codebase-build-or-pre-release-parameter-with-a-decrypt-files-command-in-it-recommended",level:4},{value:"Decrypting existing secrets locally",id:"decrypting-existing-secrets-locally",level:2},{value:"Encryption keys",id:"encryption-keys",level:2},{value:"For new projects",id:"for-new-projects",level:3},{value:"For existing projects",id:"for-existing-projects",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Certain information such as access tokens, secret keys, passwords, certificates etc. is considered as sensitive data thus should not be committed to the repository as plain text."}),"\n",(0,r.jsxs)(n.p,{children:["Silta supports encryption/decryption of such information via ",(0,r.jsx)(n.a,{href:"https://github.com/wunderio/silta-cli",children:"silta-cli"}),", furthermore, ",(0,r.jsx)(n.em,{children:"silta-cli"})," can be used both locally and during the build/deploy, thus making the process simple and consistent. Official documentation of ",(0,r.jsx)(n.em,{children:"silta-cli"})," can be found ",(0,r.jsx)(n.a,{href:"https://github.com/wunderio/silta-cli",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"encryption--decryption",children:"Encryption & decryption"}),"\n",(0,r.jsxs)(n.p,{children:["To encrypt a file for secure storing within repository, ",(0,r.jsx)(n.code,{children:"silta secrets encrypt"})," command is used. When used in Silta, encrypted files have to be decrypted during the build or deployment to take effect. See the walkthrough example below."]}),"\n",(0,r.jsx)(n.h3,{id:"1-get-the-encryption-key",children:"1. Get the encryption key"}),"\n",(0,r.jsxs)(n.p,{children:["Please refer to the section related to ",(0,r.jsx)(n.a,{href:"#encryption-keys",children:"encryption keys"})]}),"\n",(0,r.jsx)(n.h3,{id:"2-create-and-encrypt-the-file-containing-sensitive-information",children:"2. Create and encrypt the file containing sensitive information"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"silta-cli"})," allows to encrypt any file, i.e. it can be Silta configuration file containing sensitive data within environment variables or TLS certificates, an actual TLS certificate file located at ",(0,r.jsx)(n.code,{children:"/secrets/server.crt"})," or anything else. Below are some examples:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sensitive Silta configuration for Drupal chart"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"php:\n  hashsalt: super-secret\n  env:\n    IMPORTANT_API_KEY: super-secret\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sensitive Silta configuration for Frontend chart"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"services:\n  node:\n    env:\n      IMPORTANT_API_KEY: super-secret\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once you have the file ready for encryption, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"silta secrets encrypt --file /path/to/file --secret-key <secret-key>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or, if you have the encryption key stored as a local environment variable, use that as a reference instead:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"silta secrets encrypt --file /path/to/file --secret-key-env ENV_VAR_NAME\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"silta secrets encrypt"})," encrypts the source file itself unless you specify a different target path via the ",(0,r.jsx)(n.code,{children:"--output-file"})," flag (see full docs ",(0,r.jsx)(n.a,{href:"https://github.com/wunderio/silta-cli/blob/master/docs/silta_secrets_encrypt.md",children:"here"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"3-add-decryption-to-circleci-configuration",children:"3. Add decryption to CircleCI configuration"}),"\n",(0,r.jsx)(n.p,{children:"When used in Silta, files have to be decrypted to take effect. For this you need to alter the relevant build/deploy jobs, you can use one of the two options below."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h4,{id:"decrypt_files-parameter",children:[(0,r.jsx)(n.code,{children:"decrypt_files"})," parameter"]}),"\n",(0,r.jsx)(n.p,{children:"Caveats:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decrypt_files"})," is only supported in ",(0,r.jsx)(n.code,{children:"silta/drupal-build-deploy"}),", ",(0,r.jsx)(n.code,{children:"silta/drupal-build"})," and ",(0,r.jsx)(n.code,{children:"silta/drupal-deploy"})," jobs, thus only the Drupal chart"]}),"\n",(0,r.jsx)(n.li,{children:"You can't specify a custom encryption key"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Advantages:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["simpler configuration, no need to specify or generate an encryption key - one defined in ",(0,r.jsx)(n.a,{href:"/silta/docs/circleci-context",children:"CircleCI context"})," (",(0,r.jsx)(n.code,{children:"SECRET_KEY"}),") is used. Note that it's expected that secrets are encrypted with the same key locally (to get the key, refer to ",(0,r.jsx)(n.a,{href:"#encryption-keys",children:"encryption keys"})," section)."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Usage example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"decrypt_files: path/to/encrypted/file\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"path/to/encrypted/file"})," is relative to the build folder (root)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h4,{id:"codebase-build-or-pre-release-parameter-with-a-decrypt-files-command-in-it-recommended",children:[(0,r.jsx)(n.code,{children:"codebase-build"})," or ",(0,r.jsx)(n.code,{children:"pre-release"})," parameter with a ",(0,r.jsx)(n.code,{children:"decrypt-files"})," command in it (recommended)"]}),"\n",(0,r.jsx)(n.p,{children:"This approach has slightly more complex configuration however it also has more advantages:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Allows to specify a custom encryption key"}),"\n",(0,r.jsxs)(n.li,{children:["Supported by all charts:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Drupal (",(0,r.jsx)(n.code,{children:"silta/drupal-build"}),", ",(0,r.jsx)(n.code,{children:"silta/drupal-deploy"}),", ",(0,r.jsx)(n.code,{children:"silta/drupal-build-deploy"})," jobs). Note: use ",(0,r.jsx)(n.code,{children:"pre-release"})," parameter in ",(0,r.jsx)(n.code,{children:"silta/drupal-deploy"})]}),"\n",(0,r.jsxs)(n.li,{children:["Frontend (",(0,r.jsx)(n.code,{children:"silta/frontend-build-deploy"})," job)"]}),"\n",(0,r.jsxs)(n.li,{children:["Simple (",(0,r.jsx)(n.code,{children:"silta/simple-build-deploy"})," job)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Usage examples:"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"silta/drupal-build"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"codebase-build:\n- silta/decrypt-files:\n    files: sso/saml.crt\n    secret_key_env: MY_PROJECT_SECRET_KEY\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"silta/drupal-deploy"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"pre-release:\n- silta/decrypt-files:\n    files: silta/secrets\n    secret_key_env: MY_PROJECT_SECRET_KEY\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Note: If you don't specify the ",(0,r.jsx)(n.code,{children:"secret_key_env"})," parameter, default encryption key from CircleCI context will be used as mentioned earlier."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["Note for projects using ",(0,r.jsx)(n.code,{children:"silta/drupal-build"})," and ",(0,r.jsx)(n.code,{children:"silta/drupal-deploy"})]})}),"\n",(0,r.jsx)(n.p,{children:"If project uses separate jobs for build and deploy, the job you add the decryption to depends on the use-case:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["if secret needs to be in a decrypted form during application runtime, i.e., TLS certificate for SSO integration, add it under ",(0,r.jsx)(n.code,{children:"silta/drupal-build"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["if secret needs to be decrypted only during the deployment, i.e., Silta configuration file, add it under ",(0,r.jsx)(n.code,{children:"silta/drupal-deploy"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"decrypting-existing-secrets-locally",children:"Decrypting existing secrets locally"}),"\n",(0,r.jsx)(n.p,{children:"To inspect or alter information in encrypted files, you have to decrypt them locally."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Get the encryption key (refer to the ",(0,r.jsx)(n.a,{href:"#encryption-keys",children:"Secret keys"})," section of this document)"]}),"\n",(0,r.jsx)(n.li,{children:"Run:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"silta secrets decrypt --file /path/to/encrypted/file --secret-key <secret-key>\n"})}),"\n",(0,r.jsx)(n.p,{children:"or, if you have secret key stored as local environment variable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"silta secrets decrypt --file /path/to/encrypted/file --secret-key-env ENV_VAR_NAME\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"silta secrets decrypt"})," decrypts the source file itself unless you specify the",(0,r.jsx)(n.code,{children:"--output-file"})," flag. See full docs of the decryption command ",(0,r.jsx)(n.a,{href:"https://github.com/wunderio/silta-cli/blob/master/docs/silta_secrets_decrypt.md",children:"here"})]}),"\n",(0,r.jsxs)(n.p,{children:["Remember ",(0,r.jsx)(n.strong,{children:"not to"})," commit decrypted secret files!"]}),"\n",(0,r.jsx)(n.h2,{id:"encryption-keys",children:"Encryption keys"}),"\n",(0,r.jsx)(n.h3,{id:"for-new-projects",children:"For new projects"}),"\n",(0,r.jsx)(n.p,{children:"It's strongly recommended to create project-specific encryption keys or even environment specific ones for better security. Here's a walkthrough example."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:['In CircleCI, click "Settings" button in the top-right corner of your project\'s overview page, then choose "Environment variables" from the sidebar on the left. Click "Add environment variable". Name it something like ',(0,r.jsx)(n.code,{children:"MY_PROJECT_SECRET_KEY"})," and generate a secure random value for it, i.e. on Unix based systems you can use this command:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"head -c 32 /dev/urandom | base64\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Use this key locally for encryption"}),"\n",(0,r.jsxs)(n.li,{children:["Update your CircleCI configuration to use the same key, i.e., in ",(0,r.jsx)(n.code,{children:"silta/drupal-build"})," add:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"codebase-build:\n- silta/decrypt-files:\n    files: path/to/file\n    secret_key_env: MY_PROJECT_SECRET_KEY\n"})}),"\n",(0,r.jsx)(n.p,{children:"A few notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can refer to this example when switching encryption keys for an existing project. However, bear in mind that you must first locally decrypt existing secrets with ",(0,r.jsx)(n.strong,{children:"the old encryption key"})," and re-encrypt them with the new one for things to work."]}),"\n",(0,r.jsx)(n.li,{children:"Projects can have multiple encryption keys, i.e, one for development, one for staging and another one for production environment. If you choose to go this path, make sure you use the right key when encrypting/decrypting secrets per environment."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"for-existing-projects",children:"For existing projects"}),"\n",(0,r.jsx)(n.p,{children:"To get the encryption key from and existing project, follow the guide below."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Determine name of the CircleCI environment variable the project uses for decryption. This can be done by inspecting project's CircleCI configuration file and searching for ",(0,r.jsx)(n.code,{children:"secret_key_env"})," references."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["If references are found, i.e., ",(0,r.jsx)(n.code,{children:"secret_key_env: MY_PROJECT_SECRET_KEY"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"This indicates that project utilises custom encryption key(s) stored in CircleCI's environment variable(s)."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"If references are not found"})}),"\n",(0,r.jsxs)(n.p,{children:["This indicates that project uses the default encryption key stored in CircleCI's context as ",(0,r.jsx)(n.code,{children:"SECRET_KEY"})," environment variable (reference to ",(0,r.jsx)(n.a,{href:"https://circleci.com/developer/orbs/orb/silta/silta#commands-decrypt-files",children:"Silta CircleCI orb"}),"). Note that project can utilise multiple contexts, check for ",(0,r.jsx)(n.code,{children:"context"})," information in your CircleCI config to see which one is in use."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Get value of the particular CircleCI environment variable, note that when inspecting via CircleCI UI values are redacted due to security reasons. To get the actual value of the env var, you must SSH into a CircleCI environment."}),"\n",(0,r.jsx)(n.li,{children:"In CircleCI, go to your project's pipelines page, find the last successful pipeline of the environment you need to get the encryption key for. Now find the job you're interested in and rerun if with SSH (from top-right corner choose \"Rerun > Rerun job with SSH\")."}),"\n",(0,r.jsx)(n.li,{children:"Wait for the job to run until it's successful and \"Waiting for SSH sessions\". Use the SSH command from CircleCI's output, it should look something like this:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"ssh -p 54782 50.19.60.152\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:["After SSH'ing into CircleCI env, run the following command to get the encryption key value (replace ",(0,r.jsx)(n.code,{children:"MY_PROJECT_SECRET_KEY"})," with the actual env var name):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"printenv MY_PROJECT_SECRET_KEY\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:"Securely store the value locally for further use, i.e. set it as an environment variable"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);