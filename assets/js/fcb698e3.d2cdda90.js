"use strict";(self.webpackChunksilta_docs=self.webpackChunksilta_docs||[]).push([[749],{5451:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"help-with-silta-dev","title":"Helping with Silta development","description":"Development workflow","source":"@site/docs/helping_with_silta_development.md","sourceDirName":".","slug":"/help-with-silta-dev","permalink":"/silta/docs/help-with-silta-dev","draft":false,"unlisted":false,"editUrl":"https://github.com/wunderio/silta/tree/master/docs/helping_with_silta_development.md","tags":[],"version":"current","frontMatter":{"id":"help-with-silta-dev","title":"Helping with Silta development"},"sidebar":"someSidebar","previous":{"title":"Go-live checklist","permalink":"/silta/docs/go-live-checklist"},"next":{"title":"Key components","permalink":"/silta/docs/key-components"}}');var r=n(4848),s=n(8453);const l={id:"help-with-silta-dev",title:"Helping with Silta development"},o=void 0,a={},c=[{value:"Development workflow",id:"development-workflow",level:2},{value:"Testing",id:"testing",level:3},{value:"Contribution",id:"contribution",level:2},{value:"Some tips and external documentation when working with HELM charts",id:"some-tips-and-external-documentation-when-working-with-helm-charts",level:2}];function h(e){const t={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"development-workflow",children:"Development workflow"}),"\n",(0,r.jsxs)(t.p,{children:["Each chart (drupal, frontend, simple) has respective project that uses the chart as subfolder under ",(0,r.jsx)(t.code,{children:"/charts"}),". So adjustments to chart can be made on each commit. Check ",(0,r.jsx)(t.a,{href:"https://github.com/wunderio/drupal-project-k8s/blob/master/.circleci/config.yml#L29",children:".cirlceci/config.yml"})," in Drupal chart to see how it's defined. So you make a PR for a specific chart (either ",(0,r.jsx)(t.a,{href:"https://github.com/wunderio/drupal-project-k8s",children:"drupal-project-k8s"})," or ",(0,r.jsx)(t.a,{href:"https://github.com/wunderio/frontend-project-k8s",children:"frontend-project-k8s"})," or ",(0,r.jsx)(t.a,{href:"https://github.com/wunderio/simple-project-k8s",children:"simple-project-k8s"}),")"]}),"\n",(0,r.jsx)(t.h3,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(t.p,{children:"Before making a pull request you should install the unittest helm plugin:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"helm plugin install https://github.com/helm-unittest/helm-unittest --version 0.5.1\n"})}),"\n",(0,r.jsx)(t.p,{children:"and run in on your updated chart:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"helm unittest ./charts/drupal\n"})}),"\n",(0,r.jsx)(t.p,{children:"To test charts locally You will need related helm repositories to be installed locally (see charts/chartname/Chart.yaml) and subcharts downloaded."}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Adding helm repository:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"helm repo add wunderio https://storage.googleapis.com/charts.wdr.io\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Download / rebuild the charts/ directory based on the Chart.lock file"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"helm dependency build charts/drupal\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Dry-run chart and check kubernetes resource definitions for expected output"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"helm upgrade --install test charts/drupal --dry-run --debug --values silta/silta.yml\n"})}),"\n",(0,r.jsx)(t.h2,{id:"contribution",children:"Contribution"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Someone from silta dev team will review changes and review the PR. Once accepted by one of them, it can be merged to master."}),"\n",(0,r.jsxs)(t.li,{children:["Once changes are merged to project there are 2 options:","\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Silta developers diff wunderio/charts/drupal to wunderio/drupal-project-k8s/charts/drupal before next release by copying over multiple changes in bulk and increment chart version in both repos, making them in sync again."}),"\n",(0,r.jsx)(t.li,{children:"You can make a copy of that accepted PR to wunderio/charts repo where it will be accepted again."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"If you want to test a feature PR:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new branch from feature/myAwesomeThing -> feature/myAwesomeThing-test."}),"\n",(0,r.jsx)(t.li,{children:"Enable the myAwesomeThing related functionality or apply new configuration related to the feature."}),"\n",(0,r.jsx)(t.li,{children:"Commit the changes to the test branch and push to origin."}),"\n",(0,r.jsx)(t.li,{children:"Check that functionality works as it should."}),"\n",(0,r.jsx)(t.li,{children:"Write tests when possible and push them to the original feature branch or request the original author to add them."}),"\n",(0,r.jsx)(t.li,{children:"Delete the test branch if everything works."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"some-tips-and-external-documentation-when-working-with-helm-charts",children:"Some tips and external documentation when working with HELM charts"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://helm.sh/docs/chart_template_guide/control_structures/",children:"Helm template guide - control structures"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.a,{href:"http://masterminds.github.io/sprig/defaults.html",children:"Goland Sprig functions"})]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function l(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);