"use strict";(self.webpackChunksilta_docs=self.webpackChunksilta_docs||[]).push([[541],{4246:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/aws_cloudfront-260377c66fb97dccce2dc348f0951168.png"},7209:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"configuring-cdn","title":"Configuring CDN","description":"CloudFront","source":"@site/docs/configuring_cdn.md","sourceDirName":".","slug":"/configuring-cdn","permalink":"/silta/docs/configuring-cdn","draft":false,"unlisted":false,"editUrl":"https://github.com/wunderio/silta/tree/master/docs/configuring_cdn.md","tags":[],"version":"current","frontMatter":{"id":"configuring-cdn","title":"Configuring CDN"},"sidebar":"someSidebar","previous":{"title":"Request workflow","permalink":"/silta/docs/request-workflow"},"next":{"title":"Silta examples","permalink":"/silta/docs/silta-examples"}}');var o=n(4848),r=n(8453);const s={id:"configuring-cdn",title:"Configuring CDN"},c=void 0,a={},d=[{value:"CloudFront",id:"cloudfront",level:2},{value:"Origin connection during Lets Encrypt certificate verification process",id:"origin-connection-during-lets-encrypt-certificate-verification-process",level:3},{value:"Custom certificates",id:"custom-certificates",level:4},{value:"Forwarding <code>Host</code> header",id:"forwarding-host-header",level:3},{value:"Summary",id:"summary",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"cloudfront",children:"CloudFront"}),"\n",(0,o.jsxs)(t.p,{children:["You need to configure your matching ",(0,o.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html",children:"CloudFront"})," domain name with ",(0,o.jsx)(t.code,{children:"exposedDomain"})," directive:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"# silta.yml\nexposedDomain:\n  cloudfront:\n    hostname: www.example.com # matching domain name configured in CloudFront\n"})}),"\n",(0,o.jsx)(t.h3,{id:"origin-connection-during-lets-encrypt-certificate-verification-process",children:"Origin connection during Lets Encrypt certificate verification process"}),"\n",(0,o.jsxs)(t.p,{children:["Eventually you want your CDN to use Silta origin using ",(0,o.jsx)(t.code,{children:"https-only"})," ",(0,o.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-cloudfront-to-custom-origin.html",children:"origin protocol policy"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["However, it is important to understand that you may need to temporarly use ",(0,o.jsx)(t.code,{children:"http-only"})," ",(0,o.jsx)(t.strong,{children:"during the phase of initial Lets Encrypt certificate verification process"}),". Also, during this phase, you want to disable all ",(0,o.jsx)(t.code,{children:"https"})," to ",(0,o.jsx)(t.code,{children:"http"})," redirects from CloudFront Cache behaviors and from ",(0,o.jsx)(t.code,{children:"silta.yml"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"# silta.yml (when using Lets Encrypt)\ningress:\n  default:\n    # Allow HTTP connections for CloudFront, when\n    # Lets Encrypt verifies certs for the first time.\n    redirect-https: false\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.em,{children:["Note: If you don't allow ",(0,o.jsx)(t.code,{children:"http"})," traffic, and your environment is issuing a certificate with Lets Encrypt for the first time, Silta provides temporarly self-signed certificate which will cause CloudFront to not trust the origin and causes 502 Bad Gateway error, thus failing the actual certificate verification process."]})}),"\n",(0,o.jsx)(t.h4,{id:"custom-certificates",children:"Custom certificates"}),"\n",(0,o.jsxs)(t.p,{children:["If you decide to use custom verified certificate, then you may configure everything directly to ",(0,o.jsx)(t.code,{children:"https-only"})," and skip steps allowing ",(0,o.jsx)(t.code,{children:"http"})," origin requests temporarly."]}),"\n",(0,o.jsxs)(t.h3,{id:"forwarding-host-header",children:["Forwarding ",(0,o.jsx)(t.code,{children:"Host"})," header"]}),"\n",(0,o.jsx)(t.p,{children:"You want Drupal to generate URLs according to the domain and scheme that user is accessing the site."}),"\n",(0,o.jsxs)(t.p,{children:["Without forwarding ",(0,o.jsx)(t.code,{children:"Host"})," header, Drupal would use its' Silta domain and scheme (for example ",(0,o.jsx)(t.code,{children:"https://production.my-project.dev.[clusterDomain]"}),") to generate content URL addresses."]}),"\n",(0,o.jsxs)(t.p,{children:["To overcome this problem, ",(0,o.jsxs)(t.strong,{children:["you must configure CloudFront to forward ",(0,o.jsx)(t.code,{children:"Host"})," header to origin"]}),"."]}),"\n",(0,o.jsx)(t.p,{children:'To do this, apply cache policies under "Cache behaviors" tab and either:'}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html",children:"use managed cache policies"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy",children:"create custom policy"})}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Summarized in a picture",src:n(4246).A+"",width:"711",height:"601"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(6540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);