"use strict";(self.webpackChunksilta_docs=self.webpackChunksilta_docs||[]).push([[865],{1756:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"vendor-gcs","title":"Google Cloud compatibility","description":"Silta is fully GKE compatible since it\'s primarily used on it.","source":"@site/docs/vendor-gcs.md","sourceDirName":".","slug":"/vendor-gcs","permalink":"/silta/docs/vendor-gcs","draft":false,"unlisted":false,"editUrl":"https://github.com/wunderio/silta/tree/master/docs/vendor-gcs.md","tags":[],"version":"current","frontMatter":{}}');var i=s(4848),t=s(8453);const o={},l="Google Cloud compatibility",a={},c=[{value:"Cluster requirements",id:"cluster-requirements",level:2},{value:"Deployment specifics",id:"deployment-specifics",level:2},{value:"Google Cloud features",id:"google-cloud-features",level:2},{value:"VPC native cluster",id:"vpc-native-cluster",level:3},{value:"GKE Ingress for HTTP(S) Load Balancing",id:"gke-ingress-for-https-load-balancing",level:3},{value:"Cloud Armor",id:"cloud-armor",level:3},{value:"Filestore",id:"filestore",level:3},{value:"ingress-nginx load balancer on GKE private cluster",id:"ingress-nginx-load-balancer-on-gke-private-cluster",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"google-cloud-compatibility",children:"Google Cloud compatibility"})}),"\n",(0,i.jsx)(n.p,{children:"Silta is fully GKE compatible since it's primarily used on it."}),"\n",(0,i.jsx)(n.h2,{id:"cluster-requirements",children:"Cluster requirements"}),"\n",(0,i.jsxs)(n.p,{children:["Requirements are listed on ",(0,i.jsx)(n.a,{href:"https://github.com/wunderio/charts/tree/master/silta-cluster#requirements",children:"silta-cluster chart page"}),", those are common for all silta-cluster installations."]}),"\n",(0,i.jsx)(n.h2,{id:"deployment-specifics",children:"Deployment specifics"}),"\n",(0,i.jsxs)(n.p,{children:["There is no extra configuration required for basic deployments. The only change would be ",(0,i.jsx)(n.code,{children:"cluster.type"})," but it's normally overridden in CI pipeline."]}),"\n",(0,i.jsx)(n.p,{children:"Drupal, frontend and simple charts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"cluster:\n  type: gke\n"})}),"\n",(0,i.jsx)(n.h2,{id:"google-cloud-features",children:"Google Cloud features"}),"\n",(0,i.jsx)(n.h3,{id:"vpc-native-cluster",children:"VPC native cluster"}),"\n",(0,i.jsxs)(n.p,{children:["GKE clusters are ",(0,i.jsx)(n.a,{href:"https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips",children:"VPC native"})," the default now, but for compatibility reasons silta deployments are set to route-based mode by default now. This is normally overridden in CI, according to cluster."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"cluster:\n  type: gke\n  vpcNative: true\n"})}),"\n",(0,i.jsx)(n.h3,{id:"gke-ingress-for-https-load-balancing",children:"GKE Ingress for HTTP(S) Load Balancing"}),"\n",(0,i.jsxs)(n.p,{children:["Projects can define ",(0,i.jsx)(n.code,{children:"exposeDomain"})," hosts and use ",(0,i.jsx)(n.a,{href:"https://cloud.google.com/kubernetes-engine/docs/concepts/ingress",children:"GKE Ingress Class"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"exposeDomains:\n  example-gce-ingress:\n    hostname: example.com\n    # see ingress.gce definition. This can also be a custom ingress too.\n    ingress: gce\n    \ningress:\n  gce:\n    # Request a global static ip from cluster administrator first\n    staticIpAddressName: custom-ip-name\n\nnginx:\n  # Reverse proxy IP's to trust with contents of X-Forwarded-For header \n  realipfrom: \n    # Load Balancer IP (static ip you were given)\n    gce-lb-ip: 1.2.3.4/32\n"})}),"\n",(0,i.jsx)(n.h3,{id:"cloud-armor",children:"Cloud Armor"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#cloud_armor",children:"Cloud Armor"})," can only be used with GKE Ingress. Once enabled, You can define security policy (Cloud Armor policy) for Your service's backendConfig."]}),"\n",(0,i.jsx)(n.p,{children:'Silta uses "silta-ingress" security policy name by default, it can be adjusted.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'backendConfig:\n  securityPolicy:\n    name: "silta-ingress"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"filestore",children:"Filestore"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://cloud.google.com/filestore",children:"Filestore"})," - add an alternate storageclass with a shared Filestore volume.",(0,i.jsx)("br",{}),"\nPublic and private files can be stored on Google Filestore via NFS mount, providing higher i/o access than default storage. This option is useful for projects with lots of files served.",(0,i.jsx)("br",{}),"\nHave an exported share named ",(0,i.jsx)(n.code,{children:"/main_share"}),".",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:["Example configuration for ",(0,i.jsx)(n.strong,{children:"new deployments"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"mounts:\n  public-files:\n    enabled: true\n    storage: 1G\n    mountPath: /app/web/sites/default/files\n    storageClassName: nfs-shared\n  private-files:\n    enabled: true\n    storage: 1G\n    mountPath: /app/private\n    storageClassName: nfs-shared\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Add ",(0,i.jsx)(n.code,{children:"USER"})," directive to ",(0,i.jsx)(n.code,{children:"silta/php.Dockerfile"})," right after the COPY line so files are created with correct permissions and can be modified via shell (i.e. ",(0,i.jsx)(n.code,{children:"drush cr"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"USER www-data\n"})}),"\n",(0,i.jsx)(n.p,{children:"Dockerfile example of a project"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"FROM wunderio/silta-php-fpm:8.2-fpm-v1\nCOPY --chown=www-data:www-data . /app\nUSER www-data\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Full example on using the provisioned storageclass in ",(0,i.jsx)(n.strong,{children:"new and existing"})," projects ",(0,i.jsx)(n.a,{href:"/silta/docs/gcp_filestore_migration",children:"here"})]}),"\n",(0,i.jsx)(n.h3,{id:"ingress-nginx-load-balancer-on-gke-private-cluster",children:"ingress-nginx load balancer on GKE private cluster"}),"\n",(0,i.jsxs)(n.p,{children:["When using GKE private cluster, ",(0,i.jsx)(n.a,{href:"https://github.com/kubernetes/ingress-nginx",children:"ingress-nginx"})," requires an additional firewall rule that allows control plane connection to nodes on port 8443.\nExample and solution is borrowed from ",(0,i.jsx)(n.a,{href:"https://github.com/kubernetes/ingress-nginx/issues/5401",children:"https://github.com/kubernetes/ingress-nginx/issues/5401"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Control pane range (normally 172.16.0.0/28)\n# gcloud container clusters describe [CLUSTER_NAME] --region europe-north1 --format json | jq -r '.privateClusterConfig.masterIpv4CidrBlock'\nCONTROL_PLANE_RANGE=172.16.0.0/28\n\n# Get cluster tag\nNETWORK_TAGS=$(gcloud compute instances describe \\\n    $(kubectl get nodes -o jsonpath='{.items[0].metadata.name}') \\\n    --format=\"value(tags.items[0])\")\n\n# Print firewall rule command\necho gcloud compute firewall-rules create silta-nginx-lb-ingress \\\n    --action ALLOW \\\n    --direction INGRESS \\\n    --source-ranges ${CONTROL_PLANE_RANGE} \\\n    --rules tcp:8443 \\\n    --target-tags ${NETWORK_TAGS}\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Review and execute command printed above."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);