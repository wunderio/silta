"use strict";(self.webpackChunksilta_docs=self.webpackChunksilta_docs||[]).push([[451],{8338:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"vendor-eks","title":"Amazon Web Services compatibility","description":"Silta is mostly AWS compatible, there are some requirements for environments deployed to EKS cluster.","source":"@site/docs/vendor-eks.md","sourceDirName":".","slug":"/vendor-eks","permalink":"/silta/docs/vendor-eks","draft":false,"unlisted":false,"editUrl":"https://github.com/wunderio/silta/tree/master/docs/vendor-eks.md","tags":[],"version":"current","frontMatter":{}}');var r=s(4848),i=s(8453);const l={},a="Amazon Web Services compatibility",o={},c=[{value:"Cluster requirements",id:"cluster-requirements",level:2},{value:"Preparation steps",id:"preparation-steps",level:3},{value:"Silta-cluster chart requirements",id:"silta-cluster-chart-requirements",level:3},{value:"Missing functionality",id:"missing-functionality",level:2},{value:"Deployment specifics",id:"deployment-specifics",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"amazon-web-services-compatibility",children:"Amazon Web Services compatibility"})}),"\n",(0,r.jsx)(n.p,{children:"Silta is mostly AWS compatible, there are some requirements for environments deployed to EKS cluster."}),"\n",(0,r.jsx)(n.h2,{id:"cluster-requirements",children:"Cluster requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ingress-nginx as the Ingress choice"}),"\n",(0,r.jsx)(n.li,{children:"Amazon VPC CNI plugin for NetworkPolicy"}),"\n",(0,r.jsx)(n.li,{children:"Amazon EBS CSI Driver plugin for default storage class (gp2)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"preparation-steps",children:"Preparation steps"}),"\n",(0,r.jsx)(n.p,{children:"On new, empty cluster, before installing silta-cluster chart:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Install Amazon VPC CNI plugin (plugins are located in EKS -> cluster > Add-ons tab)"}),"\n",(0,r.jsx)(n.li,{children:"Install Amazon EBC CSI Driver plugin"}),"\n",(0,r.jsxs)(n.li,{children:["Create and attach IAM role to worker nodes with these permissions:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"AmazonEC2ContainerRegistryFullAccess"}),"\n",(0,r.jsx)(n.li,{children:"AmazonEC2FullAccess"}),"\n",(0,r.jsx)(n.li,{children:"AmazonEKSWorkerNodePolicy"}),"\n",(0,r.jsx)(n.li,{children:"AmazonElasticFileSystemFullAccess"}),"\n",(0,r.jsx)(n.li,{children:"AmazonS3FullAccess"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"silta-cluster-chart-requirements",children:"Silta-cluster chart requirements"}),"\n",(0,r.jsx)(n.p,{children:"Enabling proxy protocol over ingress-nginx, for passing client IP to pods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'  ingress-nginx:\n    controller:\n      config:\n        use-proxy-protocol: true\n    service:\n      annotations:\n        "service.beta.kubernetes.io/aws-load-balancer-proxy-protocol": "*"\n'})}),"\n",(0,r.jsx)(n.p,{children:"SSH uses NLB as ingress point. Apply these annotations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'gitAuth:\n  enabled: true\n  scope: \'https://github.com/wunderio\'\n  annotations:\n    "service.beta.kubernetes.io/aws-load-balancer-backend-protocol": "tcp"\n    "service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout": "60"\n    # "service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled": "true"\n    "service.beta.kubernetes.io/aws-load-balancer-type": "nlb"\n    # the length of the list must be equal to the number of subnets\n    "service.beta.kubernetes.io/aws-load-balancer-eip-allocations": "<elastic IP id>"\n    "service.beta.kubernetes.io/aws-load-balancer-subnets": "<subnet name here>,<subnet name here>,..."\n    "service.beta.kubernetes.io/aws-load-balancer-nlb-target-type": "instance"\n    "service.beta.kubernetes.io/aws-load-balancer-ip-address-type": "ipv4"\n    "service.beta.kubernetes.io/aws-load-balancer-target-group-attributes": "stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true"\n'})}),"\n",(0,r.jsx)(n.p,{children:"For NLB, it is required to have 1 Elastic IP per subnet (defined by Availability Zones)"}),"\n",(0,r.jsx)(n.p,{children:"EIP Allocation ID is in Network & Security -> Elastic IPs"}),"\n",(0,r.jsx)(n.p,{children:"Subnet names are in VPC Dashboard -> Virtual Private Cloud -> Subnets"}),"\n",(0,r.jsxs)(n.p,{children:["There are few more requirements listed on ",(0,r.jsx)(n.a,{href:"https://github.com/wunderio/charts/tree/master/silta-cluster#requirements",children:"silta-cluster chart page"}),", those are common for all silta-cluster installations"]}),"\n",(0,r.jsx)(n.h2,{id:"missing-functionality",children:"Missing functionality"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"NLB for HTTP/HTTPS ingress"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"deployment-specifics",children:"Deployment specifics"}),"\n",(0,r.jsxs)(n.p,{children:["There is no extra configuration required for basic deployments. The only change would be ",(0,r.jsx)(n.code,{children:"cluster.type"})," but it's normally overridden in CI pipeline."]}),"\n",(0,r.jsx)(n.p,{children:"Drupal, frontend and simple charts:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"cluster:\n  type: aws\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);