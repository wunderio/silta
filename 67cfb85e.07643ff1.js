(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,b=p["".concat(a,".").concat(m)]||p[m]||d[m]||i;return n?o.a.createElement(b,c(c({ref:t},s),{},{components:n})):o.a.createElement(b,c({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},162:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/aws_cloudfront-260377c66fb97dccce2dc348f0951168.png"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(7),i=(n(0),n(102)),a={id:"configuring-cdn",title:"Configuring CDN"},c={unversionedId:"configuring-cdn",id:"configuring-cdn",isDocsHomePage:!1,title:"Configuring CDN",description:"CloudFront",source:"@site/docs/configuring_cdn.md",slug:"/configuring-cdn",permalink:"/silta/docs/configuring-cdn",editUrl:"https://github.com/wunderio/silta/tree/master/docs/configuring_cdn.md",version:"current",sidebar:"someSidebar",previous:{title:"Request workflow",permalink:"/silta/docs/request-workflow"},next:{title:"Silta examples",permalink:"/silta/docs/silta-examples"}},l=[{value:"CloudFront",id:"cloudfront",children:[{value:"Origin connection during Lets Encrypt certificate verification process",id:"origin-connection-during-lets-encrypt-certificate-verification-process",children:[]},{value:"Forwarding <code>Host</code> header",id:"forwarding-host-header",children:[]}]},{value:"Summary",id:"summary",children:[]}],s={toc:l};function u(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"cloudfront"},"CloudFront"),Object(i.b)("p",null,"You need to configure your matching ",Object(i.b)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html"},"CloudFront")," domain name with ",Object(i.b)("inlineCode",{parentName:"p"},"exposedDomain")," directive:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"# silta.yml\nexposedDomain:\n  cloudfront:\n    hostname: www.example.com # matching domain name configured in CloudFront\n")),Object(i.b)("h3",{id:"origin-connection-during-lets-encrypt-certificate-verification-process"},"Origin connection during Lets Encrypt certificate verification process"),Object(i.b)("p",null,"Eventually you want your CDN to use Silta origin using ",Object(i.b)("inlineCode",{parentName:"p"},"https-only")," ",Object(i.b)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-cloudfront-to-custom-origin.html"},"origin protocol policy"),"."),Object(i.b)("p",null,"However, it is important to understand that you may need to temporarly use ",Object(i.b)("inlineCode",{parentName:"p"},"http-only")," ",Object(i.b)("strong",{parentName:"p"},"during the phase of initial Lets Encrypt certificate verification process"),". Also, during this phase, you want to disable all ",Object(i.b)("inlineCode",{parentName:"p"},"https")," to ",Object(i.b)("inlineCode",{parentName:"p"},"http")," redirects from CloudFront Cache behaviors and from ",Object(i.b)("inlineCode",{parentName:"p"},"silta.yml"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"# silta.yml (when using Lets Encrypt)\ningress:\n  default:\n    # Allow HTTP connections for CloudFront, when\n    # Lets Encrypt verifies certs for the first time.\n    redirect-https: false\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note: If you don't allow ",Object(i.b)("inlineCode",{parentName:"em"},"http")," traffic, and your environment is issuing a certificate with Lets Encrypt for the first time, Silta provides temporarly self-signed certificate which will cause CloudFront to not trust the origin and causes 502 Bad Gateway error, thus failing the actual certificate verification process.")),Object(i.b)("h4",{id:"custom-certificates"},"Custom certificates"),Object(i.b)("p",null,"If you decide to use custom verified certificate, then you may configure everything directly to ",Object(i.b)("inlineCode",{parentName:"p"},"https-only")," and skip steps allowing ",Object(i.b)("inlineCode",{parentName:"p"},"http")," origin requests temporarly."),Object(i.b)("h3",{id:"forwarding-host-header"},"Forwarding ",Object(i.b)("inlineCode",{parentName:"h3"},"Host")," header"),Object(i.b)("p",null,"You want Drupal to generate URLs according to the domain and scheme that user is accessing the site."),Object(i.b)("p",null,"Without forwarding ",Object(i.b)("inlineCode",{parentName:"p"},"Host")," header, Drupal would use its' Silta domain and scheme (for example ",Object(i.b)("inlineCode",{parentName:"p"},"https://production.my-project.dev.[clusterDomain]"),") to generate content URL addresses."),Object(i.b)("p",null,"To overcome this problem, ",Object(i.b)("strong",{parentName:"p"},"you must configure CloudFront to forward ",Object(i.b)("inlineCode",{parentName:"strong"},"Host")," header to origin"),"."),Object(i.b)("p",null,'To do this, apply cache policies under "Cache behaviors" tab and either:'),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html"},"use managed cache policies")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy"},"create custom policy"))),Object(i.b)("h2",{id:"summary"},"Summary"),Object(i.b)("p",null,Object(i.b)("img",{alt:"Summarized in a picture",src:n(162).default})))}u.isMDXComponent=!0}}]);